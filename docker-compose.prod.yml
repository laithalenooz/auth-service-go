version: '3.8'

services:
  # Auth Service - Production configuration
  auth-service:
    image: auth-service-go:latest
    container_name: auth-service-prod
    ports:
      - "8080:8080"  # HTTP API
      - "8081:8081"  # gRPC API
    environment:
      - KEYCLOAK_BASE_URL=${KEYCLOAK_BASE_URL:-http://keycloak:8080}
      - KEYCLOAK_REALM=${KEYCLOAK_REALM:-master}
      - KEYCLOAK_CLIENT_ID=${KEYCLOAK_CLIENT_ID:-auth-service}
      - KEYCLOAK_CLIENT_SECRET=${KEYCLOAK_CLIENT_SECRET}
      - REDIS_URL=${REDIS_URL:-redis://redis:6379}
      - OTEL_EXPORTER_OTLP_ENDPOINT=${OTEL_EXPORTER_OTLP_ENDPOINT:-http://otel-collector:4317}
      - OTEL_SERVICE_NAME=auth-service
      - OTEL_SERVICE_VERSION=${SERVICE_VERSION:-latest}
      - LOG_LEVEL=${LOG_LEVEL:-warn}
      - GIN_MODE=release
    depends_on:
      - redis
      - keycloak
    networks:
      - auth-service-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Redis for caching - Production configuration
  redis:
    image: redis:7-alpine
    container_name: redis-prod
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - auth-service-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.25'
          memory: 128M
    command: redis-server --appendonly yes --maxmemory 200mb --maxmemory-policy allkeys-lru

  # Keycloak - Production configuration
  keycloak:
    image: quay.io/keycloak/keycloak:26.3.1
    container_name: keycloak-prod
    environment:
      - KEYCLOAK_ADMIN=${KEYCLOAK_ADMIN:-admin}
      - KEYCLOAK_ADMIN_PASSWORD=${KEYCLOAK_ADMIN_PASSWORD}
      - KC_DB=postgres
      - KC_DB_URL=jdbc:postgresql://postgres:5432/keycloak
      - KC_DB_USERNAME=${KC_DB_USERNAME:-keycloak}
      - KC_DB_PASSWORD=${KC_DB_PASSWORD}
      - KC_HOSTNAME_STRICT=false
      - KC_HOSTNAME_STRICT_HTTPS=false
      - KC_HTTP_ENABLED=true
      - KC_PROXY=edge
    ports:
      - "8090:8080"
    volumes:
      - ./docker/keycloak/realm-export.json:/opt/keycloak/data/import/realm-export.json
    command: ["start", "--import-realm", "--optimized"]
    depends_on:
      - postgres
    networks:
      - auth-service-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # PostgreSQL for Keycloak - Production configuration
  postgres:
    image: postgres:15
    container_name: postgres-prod
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-keycloak}
      - POSTGRES_USER=${POSTGRES_USER:-keycloak}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - auth-service-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-keycloak}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

volumes:
  redis-data:
    driver: local
  postgres-data:
    driver: local

networks:
  auth-service-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16